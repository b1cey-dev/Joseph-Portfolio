// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://admin@localhost:5432/jsrob"
}

model User {
  id                String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role      @default(USER)
  bio              String?   @db.Text
  emailNotifications Boolean  @default(true)
  projectUpdates    Boolean  @default(true)
  supportMessages   Boolean  @default(true)
  projects         Project[]
  supportTickets   SupportTicket[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id           String        @id @default(cuid())
  title        String
  description  String?
  status       ProjectStatus @default(ACTIVE)
  progress     Float        @default(0)
  dueDate      DateTime?
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones   Milestone[]
  deliverables Deliverable[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([title, userId])
  @@index([userId])
}

model Milestone {
  id        String        @id @default(cuid())
  name      String
  status    ProjectStatus @default(PENDING)
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([projectId])
}

model Deliverable {
  id        String        @id @default(cuid())
  name      String
  status    ProjectStatus @default(PENDING)
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([projectId])
}

model SupportTicket {
  id          String   @id @default(cuid())
  subject     String
  description String
  priority    String
  status      String   @default("OPEN")
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  CLIENT
}

enum ProjectStatus {
  ACTIVE
  PENDING
  COMPLETED
  ARCHIVED
}
